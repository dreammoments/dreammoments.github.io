<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>后台系统安全性设计的思考</title>
    <url>/2024/08/17/design-%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>本文分享一些后台开发工作中的一些系统安全性的设计与思考，后台开发中，安全性设计是至关重要的，以确保系统的整体安全性和数据的保密性。</p>
<h1 id="数据传输安全设计"><a href="#数据传输安全设计" class="headerlink" title="数据传输安全设计"></a>数据传输安全设计</h1><p>后台系统中会涉及很多的数据传输，有 URL 传输，表单传输，响应体携带数据传输到客户端等等的数据传输形式，那么进行数据传输的过程中，我们必须充分考虑安全性建设。</p>
<h2 id="Protobuf-协议设计注意事项"><a href="#Protobuf-协议设计注意事项" class="headerlink" title="Protobuf 协议设计注意事项"></a>Protobuf 协议设计注意事项</h2><p>后台开发与前端的交互离不开 Protobuf 协议，它决定了前端需要向后端传输的数据格式，也在一定程度上影响后台逻辑的处理；<br>以下从几个方面入手，规范设计 Protobuf 协议时的安全事项；</p>
<h3 id="避免主人态参数暴露在协议中"><a href="#避免主人态参数暴露在协议中" class="headerlink" title="避免主人态参数暴露在协议中"></a>避免主人态参数暴露在协议中</h3><p>用户资料的设置中，不应该包含 user_id，理由如下：</p>
<p>主人态的身份参数（如 user_id）通常是识别用户的关键数据。直接在协议中包含这些信息可能导致数据泄露或被滥用，尤其是在数据传输过程中未加密的情况下。</p>
<p>如果攻击者能够看到 user_id，他们可能尝试利用这一信息进行未经授权的访问或进行其他恶意活动。</p>
<p>正确的做法应该是<code>利用 JWT 或者其他安全令牌，或者会话 ID 来标识用户</code>，而不是直接在 protobuf 消息中包含 user_id。</p>
<h3 id="谨慎使用有符号的数据类型"><a href="#谨慎使用有符号的数据类型" class="headerlink" title="谨慎使用有符号的数据类型"></a>谨慎使用有符号的数据类型</h3><p>通常我们有些数字类型的字段，比如是 int32 类型 buy_num 字段，那么从业务的角度来说这个字段应该就是正数；</p>
<p>假设我们后台系统中，没有校验这个 buy_num 的最大值和最小值，没有做正负数的校验；</p>
<p>那么黑客是可以将 buy_num 改成负数，从而使得他自己的代币增加，所以，在设计协议的过程中，应该定为 uint32，这样可以确保字段的最小值是正数；</p>
<h3 id="禁止携带绕过权限的字段"><a href="#禁止携带绕过权限的字段" class="headerlink" title="禁止携带绕过权限的字段"></a>禁止携带绕过权限的字段</h3><p>有些小伙伴，在设计协议的时候，会下意识地把一些业务跟协议揉在一起，让协议承担了不该承担的事情；</p>
<p>就比如有位小伙伴在协议中，设计了绕过权限校验地字段，用来实现超级管理员身份绕过权限的业务；</p>
<p>那么这样子操作，黑客完全可以根据这条协议，同样的绕过权限校验；</p>
<p>因此，<code>我们在 protobuf 中是禁止设置可以绕过权限校验的入参字段的。</code></p>
<h2 id="数据进行-MD5-加密就稳了吗？"><a href="#数据进行-MD5-加密就稳了吗？" class="headerlink" title="数据进行 MD5 加密就稳了吗？"></a>数据进行 MD5 加密就稳了吗？</h2><p>看到一个有趣的问题，用户的密码是保密的，那么密码使用 MD5 加密后直接把密码放在 URL 请求中进行请求就行了，这样合理吗？</p>
<p>答案是<strong>不合理</strong>的。密码的 MD5 值放在 URL 中等于是泄露了密码的 MD5 值，攻击者可以使用泄露的 MD5 值发起登录请求。</p>
<h2 id="cookie-可以放在响应体吗？"><a href="#cookie-可以放在响应体吗？" class="headerlink" title="cookie 可以放在响应体吗？"></a>cookie 可以放在响应体吗？</h2><p>答案是<strong>不行</strong>。我们可以对比一下两种方式所体现的安全性区别；</p>
<h3 id="使用响应体传递-cookie-数据"><a href="#使用响应体传递-cookie-数据" class="headerlink" title="使用响应体传递 cookie 数据"></a>使用响应体传递 cookie 数据</h3><ul>
<li><p>(core)暴露在响应体中： <strong>这种方式会把 cookie 数据直接暴露在响应体的内容中。攻击者可以通过各种方式获取到这些数据，例如，通过中间人攻击（MITM）或在客户端 JavaScript 中访问到。</strong></p>
</li>
<li><p>缺乏浏览器自动处理：这种方式需要开发者手动处理 cookie 数据的存储和发送过程，容易出错，可能导致安全漏洞。</p>
</li>
<li><p>容易受到 XSS 攻击： 如果 cookie 数据暴露在响应体中，客户端的 JavaScript 代码可能会被恶意脚本访问，从而泄露 cookie 数据。</p>
</li>
</ul>
<h3 id="使用-Header-传递-cookie-数据"><a href="#使用-Header-传递-cookie-数据" class="headerlink" title="使用 Header 传递 cookie 数据"></a>使用 Header 传递 cookie 数据</h3><ul>
<li><p>浏览器自动处理： 浏览器会自动解析 Set-Cookie 头部，并将其存储在客户端的 cookie 存储区中。它会处理 cookie 的属性，比如过期时间、路径、域等。</p>
</li>
<li><p>属性控制：头部属性中可以使用 <strong>HttpOnly 属性来防止 JavaScript 访问 cookie，增强安全性</strong>。<strong>Secure 属性可以确保 cookie 只在 HTTPS 连接中传输。</strong></p>
</li>
<li><p>跨站脚本攻击 (XSS) 防护： HttpOnly 属性帮助保护 cookie 不被客户端 JavaScript 读取，从而减少了 XSS 攻击的风险。</p>
</li>
<li><p>跨站请求伪造 (CSRF) 防护： 可以结合其他安全机制（如 SameSite 属性）来减少 CSRF 攻击的风险。</p>
</li>
</ul>
<h2 id="用户的敏感信息完整返回由浏览器打码安全吗？"><a href="#用户的敏感信息完整返回由浏览器打码安全吗？" class="headerlink" title="用户的敏感信息完整返回由浏览器打码安全吗？"></a>用户的敏感信息完整返回由浏览器打码安全吗？</h2><p>这种方式虽然说从某种意义上，用户在页面上是没办法看到完整的明文信息的，但<strong>显然是不安全</strong>的做法；</p>
<p>这样子做，用户的敏感信息仍然可能被恶意用户通过各种手段（如浏览器开发者工具、网络抓包等）获取；</p>
<p>正确的做法应该是由<strong>后台把数据脱敏</strong>后再返回给客户端做展示；</p>
<h2 id="初始账户名和密码以短信形式发送安全吗？"><a href="#初始账户名和密码以短信形式发送安全吗？" class="headerlink" title="初始账户名和密码以短信形式发送安全吗？"></a>初始账户名和密码以短信形式发送安全吗？</h2><p>这种方式<strong>增加了账户密码泄露的风险</strong>，密码发送过程可能留下日志记录，传输环节和用户终端也存在泄露的可能性。</p>
<p>我们可以用以下几种安全的方法来替换掉这种不安全的方案：</p>
<ul>
<li><p>使用二维码： 发送一个二维码，扫描二维码后可以引导用户到一个安全的设置页面进行密码设置。</p>
</li>
<li><p>使用邮箱：发送密码重置邮件或临时密码到用户的邮箱。邮箱通常比短信更安全，因为它们可以使用更强的加密和安全措施。用户点击邮件中的链接来设置新密码，这个链接通常有时效性，增强安全性。</p>
</li>
</ul>
<h1 id="安全执行命令设计"><a href="#安全执行命令设计" class="headerlink" title="安全执行命令设计"></a>安全执行命令设计</h1><p>后台开发过程中，有时候会遇到有要执行命令的场景，比如执行 ls，sh-c 等命令，那么这个过程就存在被用户恶意执行的场景，所以我们要进行相关的防御；</p>
<h2 id="禁止拼接命令"><a href="#禁止拼接命令" class="headerlink" title="禁止拼接命令"></a>禁止拼接命令</h2><p>使用 exec.Command 方法将命令和参数分开传递，这样可以避免命令注入的风险。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, input)</span><br></pre></td></tr></table></figure>

<p>同时要注意权限控制，确保程序运行在适当的用户权限下，避免赋予过多的系统权限，比如给用户<code>只读</code>权限；</p>
<p>并且，要校验用户输入是否是在安全的目录下，我们可以配置一个安全的基路径 <code>safeBaseDir := &quot;/safe/base&quot;</code>，如果用户操作了此外的其他目录，那么直接返回错误；</p>
<h2 id="输入参数限制"><a href="#输入参数限制" class="headerlink" title="输入参数限制"></a>输入参数限制</h2><p>我们可以把相关命令可能输入的参数限制在一个数组中，比如 ls 命令能输入的参数可以限制在 <code>-l, -a, -h</code> 中；</p>
<p>然后用户输入的参数，可以与限制数组中的参数做校验，可以防止恶意命令；</p>
<h2 id="输入参数转义"><a href="#输入参数转义" class="headerlink" title="输入参数转义"></a>输入参数转义</h2><p>我们可以对输入中的特殊字符（如 ;, &amp;, | 等）进行适当的转义，防止命令注入；</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SafeExec</span><span class="params">(userInput <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">// 简单转义示例：禁止特殊字符</span></span><br><span class="line">    <span class="keyword">if</span> strings.ContainsAny(userInput, <span class="string">&quot;;|&amp;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;invalid characters in input&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, userInput)</span><br><span class="line">    <span class="keyword">return</span> cmd.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="鉴权安全设计"><a href="#鉴权安全设计" class="headerlink" title="鉴权安全设计"></a>鉴权安全设计</h1><h2 id="验证-session"><a href="#验证-session" class="headerlink" title="验证 session"></a>验证 session</h2><ul>
<li>用户身份的验证应该从服务端的 session 中获取，而不使用客户端存下来的 session，这样可以避免越权漏洞的出现，举个例子：<ul>
<li>用户A调用API获取自己的订单列表，但通过篡改请求参数试图获取其他用户的订单列表；</li>
<li>恶意用户修改系统设置或删除其他用户的数据。通常，这些功能只有管理员有权访问。</li>
</ul>
</li>
</ul>
<h1 id="业务安全设计"><a href="#业务安全设计" class="headerlink" title="业务安全设计"></a>业务安全设计</h1><h2 id="礼包-Id-递增合适吗？"><a href="#礼包-Id-递增合适吗？" class="headerlink" title="礼包 Id 递增合适吗？"></a>礼包 Id 递增合适吗？</h2><p>项目中，往往我们会遇到一些礼品业务，那么这个礼品的 Id 是否应该设置为递增呢？</p>
<p>答案是<strong>不能递增</strong>。</p>
<p>如果采用了递增的礼包 Id ，那么说明礼包 Id 是可以进行遍历的，用户可以通过遍历礼包 Id 批量领取所有的礼包，显然这是违反业务的。</p>
<p>正确的做法应该是<code>用 UUID，或者是对礼包 Id 加密</code>，确保不会出现以上情况。</p>
<h2 id="首充业务保证只有一次"><a href="#首充业务保证只有一次" class="headerlink" title="首充业务保证只有一次"></a>首充业务保证只有一次</h2><p>首次充值业务，我们知道一个订单的有效期大概是 30 min，如果有一个用户，在多台设备触发了首充订单，相当于这个用户名下就有多个首充的订单了，然后，卡在支付流程到期间，一起支付，从而进行多次首充；</p>
<p>那么我们该如何规避这种场景呢？</p>
<p>很简单，我们只需要在完成一笔首充订单之后，关闭掉其他未支付的首充订单即可。</p>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Docker 快速安装教程</title>
    <url>/2024/08/11/docker-linux%20docker%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="docker-依赖安装"><a href="#docker-依赖安装" class="headerlink" title="docker 依赖安装"></a>docker 依赖安装</h1><p>docker 环境依赖于gcc，gcc-c++等环境，故我们需要先将基础依赖构建起来，执行以下命令开始构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h1 id="yum-配置"><a href="#yum-配置" class="headerlink" title="yum 配置"></a>yum 配置</h1><p>将阿里云提供的 docker ce 仓库添加到 yum 配置中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>快速更新 yum 的元数据缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h1 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h1 id="阿里云-docker-镜像加速"><a href="#阿里云-docker-镜像加速" class="headerlink" title="阿里云 docker 镜像加速"></a>阿里云 docker 镜像加速</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://3y0zjn6w.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h1 id="重启-docker"><a href="#重启-docker" class="headerlink" title="重启 docker"></a>重启 docker</h1><p>重启 docker 让配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<h1 id="校验是否安装成功"><a href="#校验是否安装成功" class="headerlink" title="校验是否安装成功"></a>校验是否安装成功</h1><p>查看 docker 版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker -v</span><br><span class="line">Docker version 26.1.4, build 5650f9b</span><br></pre></td></tr></table></figure>

<p>查看 docker 运行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2024-08-11 23:31:43 CST; 36s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 1783 (dockerd)</span><br><span class="line">    Tasks: 10</span><br><span class="line">   Memory: 133.6M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─1783 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure>

<p>查看到 Active 是 active (running)，证明 docker 已经启动，至此 docker 安装完毕~</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>git rebase合并多个commit教程</title>
    <url>/2024/09/03/git-git%20rebase%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AAcommit%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>实际工作中，我们通常要求保持 master 为一条线，这样能够更好的排查问题，有助于提高代码的可读性和可追溯性。这是因为每个提交都是原子性的，只包含一种修改，这样可以使提交记录更加清晰和易于管理；</p>
<p>项目开发中一个需求通常会涉及很多次的commit，那么我们如何把这个commit变成一个呢，来让我们的merge request 更加简洁明了呢</p>
<h2 id="Step1：git-commit"><a href="#Step1：git-commit" class="headerlink" title="Step1：git commit"></a>Step1：git commit</h2><p>我们首先要把我们当次的提交，commit 到本地的分支上，但是先不要 push 到 remote，因为我们需要做一下操作，让我们本次的 commit 合到前面的 commit 中去；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;your commit&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Step2：git-rebase"><a href="#Step2：git-rebase" class="headerlink" title="Step2：git rebase"></a>Step2：git rebase</h2><p>这个时候，我们要用 git log 看看我们要合并多少个 commit，比如说我这里是合并我的最近3次 commit，那么我就要这样执行来操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br><span class="line"></span><br><span class="line"><span class="comment"># HEAD~n：表示进入最近 n 次的 commit</span></span><br></pre></td></tr></table></figure>

<h2 id="Step3：fixup-option"><a href="#Step3：fixup-option" class="headerlink" title="Step3：fixup option"></a>Step3：fixup option</h2><p>接下来我们就会看到最近的3次 commit，时间线上来说，第一行的 commit 是最早期的，最后一行是最近的一次commit；</p>
<p>我们可以看到，现在三行的前面都是 <code>pick</code> ；</p>
<p>这里我们介绍以下 git 的这几种模式：</p>
<ul>
<li>pick：保留该 commit</li>
<li>reword：保留该 commit，但我需要修改该 commit 的 Message</li>
<li>edit：保留该 commit, 但我要停下来修改该提交(包括修改文件)</li>
<li>squash：将该 commit 和前一个 commit 合并</li>
<li>fixup：将该 commit 和前一个 commit 合并，但我不要保留该提交的注释信息</li>
<li>exec：执行 shell 命令</li>
<li>drop：丢弃这个 commit</li>
</ul>
<p>从而，假设我们现在合并最近3次的 commit，换句话说就是把最近两次 commit 合并到第一次 commit 中；</p>
<p>具体操作：</p>
<ul>
<li><p>按 i 进入 insert 模式，将后面两行的 <code>pick</code> 修改成 <code>fixup</code></p>
</li>
<li><p>按 ESC，输入 <code>:wq</code> 后回车保存</p>
</li>
</ul>
<h2 id="Step4：git-push"><a href="#Step4：git-push" class="headerlink" title="Step4：git push"></a>Step4：git push</h2><p>修改完了之后呢，我们就可以直接推送到 remote，但是要使用强制推送，即执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git push origin your_branch_name -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f 表示强推到 remote 仓库</span></span><br></pre></td></tr></table></figure>

<p>至此，我们就把多个 commit 合并成了一个 commit 并成功推送到远程仓库！</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>解决 Cannot find a valid baseurl for base/7/x86_64 的问题</title>
    <url>/2024/08/11/linux-%E8%A7%A3%E5%86%B3yum-baseurl%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>Centos7.9 执行 yum install 或者 yum update 后报错如下，通过报错信息可以知道是国外镜像无法访问的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;<span class="built_in">arch</span>=x86_64&amp;repo=os&amp;infra=stock error was</span><br><span class="line">14: curl#6 - <span class="string">&quot;Could not resolve host: mirrorlist.centos.org; Unknown error&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> One of the configured repositories failed (Unknown),</span><br><span class="line"> and yum doesn<span class="string">&#x27;t have enough cached data to continue. At this point the only</span></span><br><span class="line"><span class="string"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     1. Contact the upstream for the repository and get them to fix the problem.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span></span><br><span class="line"><span class="string">        upstream. This is most often useful if you are using a newer</span></span><br><span class="line"><span class="string">        distribution release than is supported by the repository (and the</span></span><br><span class="line"><span class="string">        packages for the previous distribution release still work).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     3. Run the command with the repository temporarily disabled</span></span><br><span class="line"><span class="string">            yum --disablerepo=&lt;repoid&gt; ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     4. Disable the repository permanently, so yum won&#x27;</span>t use it by default. Yum</span><br><span class="line">        will <span class="keyword">then</span> just ignore the repository <span class="keyword">until</span> you permanently <span class="built_in">enable</span> it</span><br><span class="line">        again or use --enablerepo <span class="keyword">for</span> temporary usage:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --<span class="built_in">disable</span> &lt;repoid&gt;</span><br><span class="line">        or</span><br><span class="line">            subscription-manager repos --<span class="built_in">disable</span>=&lt;repoid&gt;</span><br><span class="line"></span><br><span class="line">     5. Configure the failing repository to be skipped, <span class="keyword">if</span> it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a <span class="built_in">nice</span></span><br><span class="line">        compromise:</span><br><span class="line"></span><br><span class="line">            yum-config-manager --save --<span class="built_in">setopt</span>=&lt;repoid&gt;.skip_if_unavailable=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Cannot find a valid baseurl <span class="keyword">for</span> repo: base/7/x86_64</span><br></pre></td></tr></table></figure>


<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>通过把国外镜像替换成国内阿里云镜像来解决这个问题;</p>
<h2 id="清除-yum-缓存"><a href="#清除-yum-缓存" class="headerlink" title="清除 yum 缓存"></a>清除 yum 缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br></pre></td></tr></table></figure>


<h2 id="修改-yum-配置文件"><a href="#修改-yum-配置文件" class="headerlink" title="修改 yum 配置文件"></a>修改 yum 配置文件</h2><p>打开配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vi /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>

<p>把配置内容覆盖，全量替换成以下的阿里云镜像配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus - mirrors.aliyun.com</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>

<h2 id="生成-yum-缓存"><a href="#生成-yum-缓存" class="headerlink" title="生成 yum 缓存"></a>生成 yum 缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum makecache</span><br></pre></td></tr></table></figure>

<h2 id="更新-yum-工具"><a href="#更新-yum-工具" class="headerlink" title="更新 yum 工具"></a>更新 yum 工具</h2><p>更新过程会提示确认操作，按y后回车确认即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update</span><br></pre></td></tr></table></figure>

<p>控制台打印 Complete 代表问题解决成功，以下是博主解决完成后控制台的打印示例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Complete!</span><br><span class="line">[root@localhost ~]# </span><br></pre></td></tr></table></figure>

<p>至此，问题圆满解决！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>解决 Linux 配置免密登录后 root 登录免密失效的问题</title>
    <url>/2024/08/14/linux-%E8%A7%A3%E5%86%B3%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%90%8Eroot%E5%85%8D%E5%AF%86%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>这个问题是在预装就配置了较为完善的权限的机子上出现的问题，具体表现为 本地机器配置了正确的 Identify，远程机上配置了正确的 authorized_keys；</p>
<p>出现的场景是这样的：以非 root 的用户名登录，可以实现免密认证，以 root 登录的时候，免密失效，需要输入密码认证；</p>
<h1 id="排查思路"><a href="#排查思路" class="headerlink" title="排查思路"></a>排查思路</h1><p>建立 ssh 连接这个过程，主要是客户端和服务器做交互，服务器会处理客户端发过来的消息，从而如果出现问题了，服务器会记录对应的日志，所以我们可以先排查一下服务器关于 ssh 的日志</p>
<h2 id="查看远程服务器日志"><a href="#查看远程服务器日志" class="headerlink" title="查看远程服务器日志"></a>查看远程服务器日志</h2><p>下面这条命令是用来查看 ssh 服务的最新 20 条日志的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl --unit=ssh -n 20</span><br></pre></td></tr></table></figure>

<p>这条命令在大多数 Linux 系统上应该是有效的，前提是系统使用 systemd 作为初始化系统，并且 SSH 服务的单元名确实是 ssh。不过，实际的服务单元名可能会有所不同，具体取决于你的发行版和配置。例如，在某些系统中，SSH 服务的单元名可能是 sshd，因此如果上一条命令无效，你可以尝试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">journalctl --unit=sshd -n 20</span><br></pre></td></tr></table></figure>

<p>如果这两条命令都没有返回任何结果，我们需要确认服务是否正在运行，并检查服务的实际单元名，可以用以下命令列出 OpenSSH 的服务的名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service | grep OpenSSH</span><br></pre></td></tr></table></figure>

<h2 id="核心日志分析"><a href="#核心日志分析" class="headerlink" title="核心日志分析"></a>核心日志分析</h2><p>通过查询出来的最新日志发现日志中有一条权限拒绝的日志，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Authentication refused: bad ownership or modes <span class="keyword">for</span> file /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p><strong>这个错误表明 <code>/root/.ssh/authorized_keys</code> 文件的所有权或权限设置不正确，导致 SSH 服务器拒绝使用该文件进行身份验证。</strong></p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>根据日志含义，我们需要确保 &#x2F;root&#x2F;.ssh 目录和 authorized_keys 文件的所有权和权限设置正确。</p>
<p>以下是正确的权限设置：</p>
<h3 id="ssh-权限更新"><a href="#ssh-权限更新" class="headerlink" title=".ssh 权限更新"></a>.ssh 权限更新</h3><p>我们需要确保 &#x2F;root&#x2F;.ssh 目录的所有者和组是 root，并且权限设置为 700：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> root:root /root/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 700 /root/.ssh</span><br></pre></td></tr></table></figure>

<h3 id="authorized-keys-权限更新"><a href="#authorized-keys-权限更新" class="headerlink" title="authorized_keys 权限更新"></a>authorized_keys 权限更新</h3><p>我们需要确保 authorized_keys 文件的所有者和组是 root，并且权限设置为 600：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> root:root /root/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 600 /root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h3 id="重启-SSH-服务"><a href="#重启-SSH-服务" class="headerlink" title="重启 SSH 服务"></a>重启 SSH 服务</h3><p>完成上述步骤后，重新启动 SSH 服务以使更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>现在，服务器能够正确使用 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys 文件进行身份验证。</p>
<p>至此，问题解决！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Go 语言开发环境搭建教程</title>
    <url>/2024/08/11/golang-go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="手动安装及配置方法"><a href="#手动安装及配置方法" class="headerlink" title="手动安装及配置方法"></a>手动安装及配置方法</h1><h2 id="官方SDK下载"><a href="#官方SDK下载" class="headerlink" title="官方SDK下载"></a>官方SDK下载</h2><p>官网地址：<a class="link"   href="https://golang.org/dl" >https://golang.org/dl<i class="fas fa-external-link-alt"></i></a></p>
<p>通常我们使用国内镜像：<a class="link"   href="https://golang.google.cn/" >https://golang.google.cn<i class="fas fa-external-link-alt"></i></a></p>
<p>使用国内镜像下载Go语言进行安装的方法如下</p>
<h3 id="wget-拉取SDK"><a href="#wget-拉取SDK" class="headerlink" title="wget 拉取SDK"></a>wget 拉取SDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://golang.google.cn/dl/go1.21.13.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果出现 <code>bash: wget: command not found</code>，执行以下命令进行 wget 的安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install wget</span><br></pre></td></tr></table></figure>

<h3 id="SDK-包解压安装"><a href="#SDK-包解压安装" class="headerlink" title="SDK 包解压安装"></a>SDK 包解压安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xfz go1.21.13.linux-amd64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p>如果出现 <code>bash: tar: command not found</code>，执行以下命令进行 tar 的安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install tar</span><br></pre></td></tr></table></figure>

<h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>执行以下命令进行环境变量的配置</p>
<h3 id="配置-GOROOT、GOPATH、GOBIN"><a href="#配置-GOROOT、GOPATH、GOBIN" class="headerlink" title="配置 GOROOT、GOPATH、GOBIN"></a>配置 GOROOT、GOPATH、GOBIN</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/gopath</span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOPATH</span>:<span class="variable">$GOBIN</span>:<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-GOPROXY"><a href="#配置-GOPROXY" class="headerlink" title="配置 GOPROXY"></a>配置 GOPROXY</h3><p>默认的Go代理是在国外，访问慢，需要更换成国内的代理，提高效率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GOPROXY=<span class="string">&quot;https://goproxy.cn&quot;</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br></pre></td></tr></table></figure>

<h2 id="重载系统配置文件"><a href="#重载系统配置文件" class="headerlink" title="重载系统配置文件"></a>重载系统配置文件</h2><p>配置完环境变量之后，需要手动重载一次系统的配置文件，或者重启系统，否则配置不生效；</p>
<p>重载系统配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>重启系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h2 id="校验是否安装成功"><a href="#校验是否安装成功" class="headerlink" title="校验是否安装成功"></a>校验是否安装成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# go version</span><br><span class="line">go version go1.21.13 linux/amd64</span><br></pre></td></tr></table></figure>

<p>至此，Linux Go语言开发环境搭建完成！</p>
<h1 id="自动化安装及配置方法（懒人专享）"><a href="#自动化安装及配置方法（懒人专享）" class="headerlink" title="自动化安装及配置方法（懒人专享）"></a>自动化安装及配置方法（懒人专享）</h1><h2 id="编写自动化安装脚本"><a href="#编写自动化安装脚本" class="headerlink" title="编写自动化安装脚本"></a>编写自动化安装脚本</h2><p>创建脚本文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi setup_go_env.sh</span><br></pre></td></tr></table></figure>

<p>往脚本文件中写入内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数检查并安装软件</span></span><br><span class="line">install_if_missing() &#123;</span><br><span class="line">    local package=$1</span><br><span class="line">    local install_cmd=$2</span><br><span class="line">    if ! command -v $package &amp;&gt; /dev/null; then</span><br><span class="line">        echo &quot;$package is not installed. Installing...&quot;</span><br><span class="line">        eval $install_cmd</span><br><span class="line">    else</span><br><span class="line">        echo &quot;$package is already installed.&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载 Go SDK</span></span><br><span class="line">echo &quot;## Downloading Go SDK&quot;</span><br><span class="line">if ! wget https://golang.google.cn/dl/go1.21.13.linux-amd64.tar.gz; then</span><br><span class="line">    echo &quot;wget is not installed. Installing wget...&quot;</span><br><span class="line">    install_if_missing &quot;wget&quot; &quot;sudo yum install -y wget&quot;</span><br><span class="line">    wget https://golang.google.cn/dl/go1.21.13.linux-amd64.tar.gz</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压 Go SDK</span></span><br><span class="line">echo &quot;## Extracting Go SDK&quot;</span><br><span class="line">if ! tar xfz go1.21.13.linux-amd64.tar.gz -C /usr/local; then</span><br><span class="line">    echo &quot;tar is not installed. Installing tar...&quot;</span><br><span class="line">    install_if_missing &quot;tar&quot; &quot;sudo yum install -y tar&quot;</span><br><span class="line">    tar xfz go1.21.13.linux-amd64.tar.gz -C /usr/local</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 Go 是否已安装</span></span><br><span class="line">install_if_missing &quot;go&quot; &quot;sudo yum install -y golang&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量</span></span><br><span class="line">echo &quot;## Configuring environment variables&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将环境变量写入 /etc/profile</span></span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;export GOROOT=/usr/local/go&#x27;</span><br><span class="line">    echo &#x27;export GOPATH=/home/&#x27;$(whoami)&#x27;/gopath&#x27;</span><br><span class="line">    echo &#x27;export GOBIN=$GOPATH/bin&#x27;</span><br><span class="line">    echo &#x27;export PATH=$GOPATH:$GOBIN:$GOROOT/bin:$PATH&#x27;</span><br><span class="line">&#125; | sudo tee -a /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置 Go 代理</span></span><br><span class="line">echo &#x27;## Configuring GOPROXY&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    echo &#x27;export GOPROXY=&quot;https://goproxy.cn&quot;&#x27;</span><br><span class="line">    echo &#x27;export GO111MODULE=on&#x27;</span><br><span class="line">&#125; | sudo tee -a /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提示用户手动重载配置</span></span><br><span class="line">echo &quot;## Configuration completed. Please restart your terminal or run &#x27;source /etc/profile&#x27; to apply the changes.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>赋予脚本执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x setup_go_env.sh</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./setup_go_env.sh</span><br></pre></td></tr></table></figure>

<p>脚本运行完成后会提示执行 <code>source /etc/profile</code> 更新系统环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p>校验是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# go version</span><br><span class="line">go version go1.21.13 linux/amd64</span><br></pre></td></tr></table></figure>

<p>至此，Linux Go语言开发环境搭建完成！</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
  </entry>
  <entry>
    <title>Linux Protobuffer 详细安装教程</title>
    <url>/2024/08/18/protobuf-protobuf%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>最新版本的 Protobuffer 的安装已经不需要跟之前一样繁琐的自己进行编译了，直接解压移动到指定目录就可以了，非常省事，主要从以下五个方面讲解 protobuffer 的安装；</p>
<h1 id="下载-Protobuffer-依赖库"><a href="#下载-Protobuffer-依赖库" class="headerlink" title="下载 Protobuffer 依赖库"></a>下载 Protobuffer 依赖库</h1><p>Protobuffer 依赖于 c++ 环境和其相关的一系列库，我们需要做前置安装；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install autoconf automake libtool curl make gcc-c++ unzip</span><br></pre></td></tr></table></figure>

<h1 id="安装-Protobuffer"><a href="#安装-Protobuffer" class="headerlink" title="安装 Protobuffer"></a>安装 Protobuffer</h1><p><a class="link"   href="https://github.com/protocolbuffers/protobuf/releases/" >protobuffer github 仓库地址<i class="fas fa-external-link-alt"></i></a></p>
<p>wget 从 github 拉取目前的最新版本 Protocol Buffers v27.3</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v27.3/protoc-27.3-linux-x86_64.zip</span><br></pre></td></tr></table></figure>

<h1 id="解压-Protobuffer"><a href="#解压-Protobuffer" class="headerlink" title="解压 Protobuffer"></a>解压 Protobuffer</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip protoc-27.3-linux-x86_64.zip -d protoc-27.3</span><br></pre></td></tr></table></figure>

<h1 id="移动到指定目录下"><a href="#移动到指定目录下" class="headerlink" title="移动到指定目录下"></a>移动到指定目录下</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> protoc-27.3/bin/protoc /usr/local/bin/</span><br></pre></td></tr></table></figure>

<p>将 protoc 移动到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 目录的主要原因包括：</p>
<ul>
<li><p>系统路径</p>
<p>  可执行文件路径： &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 是一个标准的系统路径，用于存放用户安装的可执行文件。将 protoc 移动到这个目录，确保它可以被系统上的所有用户和进程方便地调用，而无需指定完整路径。</p>
</li>
<li><p>环境变量</p>
<p>  简化使用： 将 protoc 移动到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 后，可以直接在终端中输入 protoc 而不必提供其完整路径。这简化了命令的使用，提升了开发效率。</p>
</li>
<li><p>系统标准</p>
<p>  与系统工具一致： 将用户安装的工具放在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 避免与系统自带的工具发生冲突。系统工具通常位于 &#x2F;bin&#x2F; 或 &#x2F;usr&#x2F;bin&#x2F;，而用户安装的工具则放在 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 以保持清晰的分隔。</p>
</li>
<li><p>权限和管理</p>
<p>  适当的权限： &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 目录通常具有合适的权限设置，允许用户安装和管理自己的工具，而不影响系统级工具的安全性和稳定性。</p>
</li>
</ul>
<h1 id="校验安装是否完成"><a href="#校验安装是否完成" class="headerlink" title="校验安装是否完成"></a>校验安装是否完成</h1><p>执行以下命令，可以检查是否完成安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# protoc --version</span><br><span class="line">libprotoc 27.3</span><br></pre></td></tr></table></figure>

<p>提示以上信息则证明安装完成！</p>
]]></content>
      <categories>
        <category>Protobuffer</category>
      </categories>
  </entry>
</search>
